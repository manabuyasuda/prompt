 /* #Icon
   -------------------------------------------------------------------------- */
/*doc
---
title: icon
name: icon
categories: [project]
---

アイコンフォントを使ったアイコンを表示します。デフォルトでは`:before`擬似要素で表示されます。
サンプルコードはパンくずリストのホームをアイコンで（2つ目以降はアイコンだけで）示した場合の例です。

装飾的なアイコンは`<span>`と`aria-hidden="true"`でマークアップをします。

意味を伝えたいアイコンは`aria-label=""`でマークアップします。
テキスト全体を読み上げたときに違和感が出ないようにします。

テキストを表示できない場合は`.u-sr-only`でテキストをマークアップします（非表示のままスクリーンリーダーには読み上げられます）。

```block
<div>
  <span class="p-icon p-icon--home" aria-hidden="true"></span>ホーム
</div>

<div>
  <span class="p-icon p-icon--home" aria-label="ホーム"></span>
</div>

<div>
  <span class="p-icon p-icon--home" aria-hidden="true"></span>
  <span class="u-sr-only">ホーム</span>
</div>
```
*/
// 任意のクラスの擬似要素で表示する場合は@mixinを使って、
// ベーススタイルとアイコンの名前を取得します。
// @example scss
// .p-list__link {
//   &:after {
//     @include _p-icon;
//     @include _p-icon-name(chevron-right);
//   }
// }
@font-face {
  font-family: "<%= fontName %>";
  src: url('<%= fontPath %><%= fontName %>.eot');
  src: url('<%= fontPath %><%= fontName %>.eot?#iefix') format('eot'),
    url('<%= fontPath %><%= fontName %>.woff') format('woff'),
    url('<%= fontPath %><%= fontName %>.ttf') format('truetype'),
    url('<%= fontPath %><%= fontName %>.svg#<%= fontName %>') format('svg');
  font-weight: normal;
  font-style: normal;
}

// アイコンフォントのベーススタイル
@mixin _p-icon {
  font-family: "<%= fontName %>";
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  position: relative;
  top: -0.1em;
  display: inline-block;
  vertical-align: middle;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  line-height: 1;
  text-decoration: none;
  text-transform: none;
  speak: none;
}

/* `p-icon p-icon--icon-name`のようなマルチクラスで指定します。 */
.p-icon {
  display: inline-block;
}

.p-icon:before {
  @include _p-icon;
}

@function _icon-char($filename) {
  $char: "";
<% _.each(glyphs, function(glyph) { %>
  @if $filename == <%= glyph.fileName %> { $char: "\<%= glyph.codePoint %>"; }<% }); %>

  @return $char;
}

@mixin _p-icon-name($filename) {
  & { content: _icon-char($filename); }
}

<% _.each(glyphs, function(glyph) { %>.p-icon--<%= glyph.fileName %>:before { @include _p-icon-name(<%= glyph.fileName %>); }
<% }); %>
